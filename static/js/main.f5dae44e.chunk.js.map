{"version":3,"sources":["lib/computeMillis.js","lib/storage.js","Controls/Controls.js","Controls/index.js","Timer/Timer.js","lib/keyGen.js","lib/getTime.js","Timer/index.js","CountdownTimer/CountdownTimer.js","CountdownTimer/index.js","StopWatch/StopWatch.js","StopWatch/index.js","App.js","index.js"],"names":["computeMillis","time","split","reverse","sec","min","ms","getItem","key","window","sessionStorage","setItem","value","removeItem","Controls","props","running","disabled","start","stop","reset","className","onClick","nowish","Date","now","Math","round","Timer","defaultTime","autoStart","controls","direction","from","limit","onComplete","storageKey","isCountDown","STORAGE_KEY","RUNNING_KEY","STARTED_KEY","isRunning","useState","setRunning","sessionStarted","Number","started","setStarted","initialTime","sessionTime","setTime","timer","useRef","current","setInterval","t","startedAt","elapsed","clearInterval","forEach","useEffect","minutes","trunc","seconds","toFixed","replace","getTime","defaultProps","undefined","CountdownTimer","StopWatch","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5dae44e.chunk.js","sourcesContent":["export default function computeMillis(time) {\n  const [ sec, min ] = time.split(':').reverse();\n  let ms = 0;\n\n  if (sec) {\n    ms += +sec * 1000;\n  }\n  if (min) {\n    ms += +min * 1000 * 60;\n  }\n\n  return ms;\n}\n","const getItem = key => window.sessionStorage.getItem(key);\nconst setItem = (key, value) => window.sessionStorage.setItem(key, value);\nconst removeItem = key => window.sessionStorage.removeItem(key);\n\nexport {\n  getItem,\n  setItem,\n  removeItem,\n};\n","import React from 'react';\n\nconst Controls = props => {\n  const { running, disabled, start, stop, reset } = props;\n  return (\n    <div>\n    {!running && <button className=\"start\" disabled={disabled.start} onClick={start}>Start</button>}\n    {running && <button className=\"stop\" onClick={stop}>Stop</button>}\n    <button className=\"reset\" disabled={disabled.reset} onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\nexport default Controls;\n","import Controls from './Controls';\nexport default Controls;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  keyGen,\n  computeMillis,\n  getTime,\n  getItem,\n  setItem,\n  removeItem,\n} from '../lib';\nimport Controls from '../Controls';\n\nconst INTERVAL = 100;\nconst round = ms => Math.round(ms/INTERVAL) * INTERVAL;\nconst nowish = () => round(Date.now());\n\nconst Timer = ({\n  autoStart,\n  controls,\n  direction,\n  from,\n  limit,\n  onComplete,\n  storageKey,\n}) => {\n  const isCountDown = direction === -1;\n  const { STORAGE_KEY, STARTED_KEY, RUNNING_KEY } = keyGen(storageKey);\n\n  const isRunning = !!getItem(RUNNING_KEY);\n  const [running, setRunning] = useState(isRunning);\n\n  const sessionStarted = Number(getItem(STARTED_KEY));\n  const [started, setStarted] = useState(sessionStarted);\n\n  const initialTime = computeMillis(from);\n  const sessionTime = getItem(STORAGE_KEY);\n  let defaultTime;\n  if (sessionTime) {\n    defaultTime = started\n      ? initialTime + direction * (nowish() - started)\n      : Number(sessionTime);\n  } else {\n    defaultTime = initialTime;\n  }\n  const [time, setTime] = useState(defaultTime);\n\n  let timer = useRef();\n\n  const start = () => {\n    timer.current = setInterval(() => setTime(t => t + (direction * INTERVAL)), INTERVAL);\n    if (!started) {\n      let startedAt;\n      if (isCountDown) {\n        const elapsed = initialTime - (Number(sessionTime) || initialTime);\n        startedAt = nowish() - elapsed;\n      } else {\n        startedAt = nowish() - time;\n      }\n      setStarted(startedAt);\n      setItem(STARTED_KEY, startedAt);\n    }\n    setRunning(true);\n    setItem(RUNNING_KEY, true);\n  };\n\n  const stop = () => {\n    clearInterval(timer.current);\n    setRunning(false);\n    setStarted(0);\n    [RUNNING_KEY, STARTED_KEY].forEach(removeItem);\n  };\n\n  const reset = () => {\n    setTime(initialTime);\n  }\n\n  useEffect(() => {\n    if (running || autoStart) {\n      start();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (isCountDown && time <= 0) {\n      if (running && onComplete) {\n        onComplete();\n      }\n      stop();\n    } else {\n      if (!isCountDown && limit && time >= computeMillis(limit)) {\n        if (running && onComplete) {\n          onComplete();\n        }\n        stop();\n      }\n    }\n    setItem(STORAGE_KEY, time);\n  }, [time]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n  const disabled = {\n    start: isCountDown\n      ? time <= 0\n      : limit && time >= computeMillis(limit),\n    reset: running || time === initialTime,\n  };\n\n  return (\n    <>\n      <div className=\"time\">{getTime(time)}</div>\n      {controls && (\n        <Controls\n          running={running}\n          disabled={disabled}\n          start={start}\n          stop={stop}\n          reset={reset}\n        />\n      )}\n    </>\n  );\n};\n\nconst timeFormat = /^\\d+:\\d\\d\\.?\\d?$/;\nconst propError = prop =>`The \"${prop}\" prop must be of the format 99#:##.9 (\"9\" digits optional)`;\nTimer.propTypes = {\n  autoStart: PropTypes.bool,\n  controls: PropTypes.bool,\n  direction: PropTypes.oneOf([-1, 1]).isRequired,\n  from: PropTypes.string.isRequired,\n  fromValue: function(props) {\n    if (!props.from.match(timeFormat)) {\n      return Error(propError('from'))\n    }\n  },\n  limit: PropTypes.string,\n  limitValue: function(props) {\n    if (props.limit && !props.limit.match(timeFormat)) {\n      return Error(propError('limit'))\n    }\n  },\n  onComplete: PropTypes.func,\n  storageKey: PropTypes.string.isRequired,\n}\n\nTimer.defaultProps = {\n  autoStart: false,\n  controls: true,\n  onComplete: undefined,\n}\n\nexport default Timer;\n","export default function keyGen(key) {\n  return {\n    STORAGE_KEY: key,\n    RUNNING_KEY: `${key}.running`,\n    STARTED_KEY: `${key}.started`,\n  };\n}\n","export default function getTime(ms) {\n  const minutes = Math.trunc(ms/1000/60);\n  const seconds = (ms/1000 - minutes*60)\n    .toFixed(1)\n    .replace(/^(\\d\\.\\d)/, '0$1');\n\n  return `${minutes}:${seconds}`;\n}\n","import Timer from './Timer';\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from '../Timer';\n\nconst CountdownTimer = props => (\n  <Timer direction={-1} {...props} />\n)\n\nCountdownTimer.propTypes = {\n  autoStart: PropTypes.bool,\n  controls: PropTypes.bool,\n  from: PropTypes.string.isRequired,\n  onComplete: PropTypes.func,\n  storageKey: PropTypes.string.isRequired,\n}\n\nCountdownTimer.defaultProps = {\n  autoStart: false,\n  controls: true,\n  onComplete: undefined,\n}\n\nexport default CountdownTimer;\n","import CountdownTimer from './CountdownTimer';\nexport default CountdownTimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from '../Timer';\n\nconst StopWatch = props => (\n  <Timer direction={1} from=\"0:00\" {...props} />\n)\n\nStopWatch.propTypes = {\n  autoStart: PropTypes.bool,\n  controls: PropTypes.bool,\n  limit: PropTypes.string,\n  onComplete: PropTypes.func,\n  storageKey: PropTypes.string.isRequired,\n}\n\nStopWatch.defaultProps = {\n  autoStart: false,\n  controls: true,\n  limit: undefined,\n  onComplete: undefined,\n}\n\nexport default StopWatch;\n","import StopWatch from './StopWatch';\nexport default StopWatch;\n","import React from 'react';\nimport './App.css';\nimport CountdownTimer from './CountdownTimer';\nimport StopWatch from './StopWatch';\n\nconst App = () => (\n  <div className=\"App\">\n    <CountdownTimer\n      from=\"0:04.1\"\n      storageKey=\"my-timer\"\n    />\n    <hr />\n    <StopWatch\n      limit=\"0:05.1\"\n      storageKey=\"my-stopwatch\"\n    />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}